{"ast":null,"code":"var _jsxFileName = \"/Users/tdo/Desktop/dog-gallery/src/Gallery.js\",\n  _s = $RefreshSig$();\nimport './Gallery.css';\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\n// The main Gallery component that displays the selected breeds.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Gallery() {\n  _s();\n  const [dogImages, setDogImages] = useState([]);\n  const location = useLocation();\n  // Retrieve the selected breeds from the location state, or default to an empty array.\n  const selectedBreeds = location.state ? location.state.breeds : [];\n\n  // Effect hook to fetch dog images for the selected breeds when the component mounts or selectedBreeds change.\n  useEffect(() => {\n    // Asynchronous function to fetch dog images.\n    async function fetchDogImages() {\n      // Array to hold fetched images.\n      const fetchedImages = [];\n\n      // Iterate over each selected breed to fetch its image.\n      for (let breed of selectedBreeds) {\n        try {\n          // Make an API request to get a random image for the current breed.\n          const response = await fetch(`https://dog.ceo/api/breed/${breed}/images/random`);\n          const data = await response.json();\n\n          // If the API request is successful, push the breed and image URL to the fetchedImages array.\n          if (data.status === 'success') {\n            fetchedImages.push({\n              breed,\n              imageUrl: data.message\n            });\n          }\n        } catch (error) {\n          console.error(\"Error fetching image for breed:\", breed);\n        }\n      }\n\n      // Update the dogImages state with the fetched images.\n      setDogImages(fetchedImages);\n    }\n\n    // Invoke the fetchDogImages function.\n    fetchDogImages();\n  }, [selectedBreeds]); // Dependency array ensures this effect runs when selectedBreeds changes.\n\n  // Render the gallery of dog images.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gallery-container\",\n    children: dogImages.map((dog, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dog-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: dog.breed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: dog.imageUrl,\n        alt: dog.breed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n_s(Gallery, \"8UlDx/ZOXne6P4tAf2//i0EwoKk=\", false, function () {\n  return [useLocation];\n});\n_c = Gallery;\nexport default Gallery;\nvar _c;\n$RefreshReg$(_c, \"Gallery\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","jsxDEV","_jsxDEV","Gallery","_s","dogImages","setDogImages","location","selectedBreeds","state","breeds","fetchDogImages","fetchedImages","breed","response","fetch","data","json","status","push","imageUrl","message","error","console","className","children","map","dog","index","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","_c","$RefreshReg$"],"sources":["/Users/tdo/Desktop/dog-gallery/src/Gallery.js"],"sourcesContent":["import './Gallery.css';\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\n// The main Gallery component that displays the selected breeds.\nfunction Gallery() {\n    const [dogImages, setDogImages] = useState([]);\n    const location = useLocation();\n    // Retrieve the selected breeds from the location state, or default to an empty array.\n    const selectedBreeds = location.state ? location.state.breeds : [];\n\n    // Effect hook to fetch dog images for the selected breeds when the component mounts or selectedBreeds change.\n    useEffect(() => {\n        // Asynchronous function to fetch dog images.\n        async function fetchDogImages() {\n            // Array to hold fetched images.\n            const fetchedImages = [];\n\n            // Iterate over each selected breed to fetch its image.\n            for (let breed of selectedBreeds) {\n                try {\n                    // Make an API request to get a random image for the current breed.\n                    const response = await fetch(`https://dog.ceo/api/breed/${breed}/images/random`);\n                    const data = await response.json();\n\n                    // If the API request is successful, push the breed and image URL to the fetchedImages array.\n                    if (data.status === 'success') {\n                        fetchedImages.push({ breed, imageUrl: data.message });\n                    }\n                } catch (error) {\n                    console.error(\"Error fetching image for breed:\", breed);\n                }\n            }\n\n            // Update the dogImages state with the fetched images.\n            setDogImages(fetchedImages);\n        }\n\n        // Invoke the fetchDogImages function.\n        fetchDogImages();\n    }, [selectedBreeds]);  // Dependency array ensures this effect runs when selectedBreeds changes.\n\n    // Render the gallery of dog images.\n    return (\n        <div className=\"gallery-container\">\n            {dogImages.map((dog, index) => (\n                <div key={index} className=\"dog-container\">\n                    <h2>{dog.breed}</h2>\n                    <img src={dog.imageUrl} alt={dog.breed} />\n                </div>\n            ))}\n        </div>\n    );\n}\n\nexport default Gallery;"],"mappings":";;AAAA,OAAO,eAAe;AACtB,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAMS,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B;EACA,MAAMQ,cAAc,GAAGD,QAAQ,CAACE,KAAK,GAAGF,QAAQ,CAACE,KAAK,CAACC,MAAM,GAAG,EAAE;;EAElE;EACAX,SAAS,CAAC,MAAM;IACZ;IACA,eAAeY,cAAcA,CAAA,EAAG;MAC5B;MACA,MAAMC,aAAa,GAAG,EAAE;;MAExB;MACA,KAAK,IAAIC,KAAK,IAAIL,cAAc,EAAE;QAC9B,IAAI;UACA;UACA,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAE,6BAA4BF,KAAM,gBAAe,CAAC;UAChF,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;UAElC;UACA,IAAID,IAAI,CAACE,MAAM,KAAK,SAAS,EAAE;YAC3BN,aAAa,CAACO,IAAI,CAAC;cAAEN,KAAK;cAAEO,QAAQ,EAAEJ,IAAI,CAACK;YAAQ,CAAC,CAAC;UACzD;QACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;UACZC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAET,KAAK,CAAC;QAC3D;MACJ;;MAEA;MACAP,YAAY,CAACM,aAAa,CAAC;IAC/B;;IAEA;IACAD,cAAc,CAAC,CAAC;EACpB,CAAC,EAAE,CAACH,cAAc,CAAC,CAAC,CAAC,CAAE;;EAEvB;EACA,oBACIN,OAAA;IAAKsB,SAAS,EAAC,mBAAmB;IAAAC,QAAA,EAC7BpB,SAAS,CAACqB,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACtB1B,OAAA;MAAiBsB,SAAS,EAAC,eAAe;MAAAC,QAAA,gBACtCvB,OAAA;QAAAuB,QAAA,EAAKE,GAAG,CAACd;MAAK;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACpB9B,OAAA;QAAK+B,GAAG,EAAEN,GAAG,CAACP,QAAS;QAACc,GAAG,EAAEP,GAAG,CAACd;MAAM;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,GAFpCJ,KAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGV,CACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAAC5B,EAAA,CAhDQD,OAAO;EAAA,QAEKH,WAAW;AAAA;AAAAmC,EAAA,GAFvBhC,OAAO;AAkDhB,eAAeA,OAAO;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}